Descrição da Implementação - A1

Para a implementação desta primeira atividade, o código da WS3DApp foi alterado para adicionar novos Memory Objects e Codelets.

1. Memory Objects

- Memória Sensorial:

visionMO: Para acesso aos objetos na visão da criatura.
innerSenseMO: Para acesso aos dados de posicionamento e combustível da criatura.

- Memória Perceptual:

knownFoodsMO: contém a lista de todos os objetos de ítens de comida no campo visual da criatura.
closestFoodMO: contém o ítem da lista acima que se encontra mais próximo da criatura.
knownJewelsMO: contém a lista de jóias no campo visual da criatura.
leafletJewelMO: contém o ítem da lista acima que se encontra mais próximo da criatura e que faz parte dos requisitos dos leaflets.
closestObstacleMO: contém o objeto no ambiente que se encontra mais próximo da criatura.
leafletsDoneMO: indica que a criatura já coletou todas as jóias necessárias de acordo com as especificações dos leaflets.
atDeliverySpotMO: indica que a criatura está na posição do Delivery Spot.

- Memória Motora:

legsMO: Para execução da movimentação da criatura.
handsMO: Para execução de ações de coleta de jóias e consumo de comida.

2. Memory Container

Devido ao fato que mais de uma decisão relativa à movimentação da criatura ser possível, foi implementado um Memory Container (legsDecisionMC) para arbitrar qual conteúdo de memory object é escrito na memória motora de acordo com ítens de avaliação.

3. Codelets

- Codelets Sensoriais

Sem alterações em relação ao aplicativo base, utilizando Inner Sense e Vision para detectar o estado corrente da criatura e os objetos no campo de visão.

- Codelets Perceptuais

Food Detector: Codelet que analisa o ambiente e carrega o memory object com a lista dos ítens de comida.
Closest Food Detector: Codelet que determina qual é o ítem de comida mais próximo da criatura.
Jewel Detector: Codelet que analisa o ambiente e carrega o memory object com a lista das jóias do ambiente.
Leaflet Jewel Detector: Codelet que determina qual é a próxima jóia que a criature deve procurar no ambiente de acordo com a especificação dos leaflets.
Closest Obstacle Detector: Codelet que analisa o ambiente e carrega o memory object com o objeto mais próximo da criatura.
Leaflets Done Detector: Codelet que analisa se todas as jóias do leaflet foram coletadas.
At Delivery Spot Detector: Codelet que analisa se a criatura está nas proximidades do Delivery Spot.

- Codelets Comportamentais:

Go To Closest Food: Codelet que instrui a criatura a se movimentar na direção do ítem de comida mais próximo utilizando a arquitetura de subsumption, no caso do combustível da criatura estar com um nível inferior a 40% do total.
Go To Leaflet Jewel: Codelet que instrui a criatura a se movimentar na direção da jóia do leaflet utilizando a arquitetura de subsumption.
Go To Delivery Spot: Codelet que instrui a criatura a se movimentar na direção do Delivery Spot.
Eat Closest Food: Codelet que instrui a criatura a consumir um ítem de comida.
Pickup Jewel: Codelet que instrui a criatura a coletar uma jóia do ambiente conforme especificado nos leaflets.
Remove Obstacle: Codelet que detecta quando um obstáculo está próximo da criatura, e determina sua remoção se não for uma jóia dos leaflets.
Deliver Leaflets: Codelet que executa a entrega das jóias dos leaflets.
Wander: Codelet que executa um giro no ambiente quando nenhuma outra ação motora for cabível.

- Codelets Motores:

Apenas alterado o codelet de movimentação das pernas, para utilizar a saída do Memory Container.

O diagrama abaixo ilustra o relacionamento dos memory objects e codelets desta solução:

-- figura 1.

Descrição da Implementação - A2

De forma similar à primeira atividade, o código da WS3DApp foi alterado para adicionar novos Memory Objects, Codelets e uma solução de roteamento em grid.

1. Memory Objects

- Memória Sensorial:

visionMO: Para acesso aos objetos na visão da criatura.
innerSenseMO: Para acesso aos dados de posicionamento e combustível da criatura.

- Memória Perceptual

BrickListMO: contém a lista de todos os tijolos no campo visual da criatura.
ClosestBrickMO: contém o tijolo da lista acima mais próximo da criatura.
CloseBrickFoundMO: indica que um tijolo foi encontrado a poucas unidades de distância da criatura.

- Memória Motora:

legsMO: Para execução da movimentação da criatura.

3. Codelets

- Codelets Sensoriais

Sem alterações em relação ao aplicativo base, utilizando Inner Sense e Vision para detectar o estado corrente da criatura e os objetos no campo de visão.

- Codelets Perceptuais

BrickDetector: Codelet que analisa o ambiente e carrega o memory object com a lista dos tijolos.
ClosestBrickDetector: Codelet que determina qual é o tijolo mais próximo da criatura.

- Codelets Comportamentais

Go To Destination: Codelet que instrui a criatura a se movimentar no ambiente evitando a colisão com os tijolos. Para tanto é utilizada uma biblioteca de roteamento em grid bidimensional.
AvoidBrick: Codelet que ao encontrar um tijolo muito próximo à criatura, provoca o replanejamento do trajeto a ser seguido pela criatiura.

4. Biblioteca de Roteamento em grid

Uma nova classe no arquivo PathFinder.java foi criada para utilizar a biblioteca GridNav-java (https://github.com/elnygren/GridNav-java) para executar o roteamento da criatura no ambiente até o novo destino.
Essa biblioteca fornece pathfinding usando alguns algoritmos distintos. Para esta solução foi selecionado o A-Star.

O diagrama abaixo ilustra o relacionamento dos memory objects e codelets desta solução:

-- figura 2.
